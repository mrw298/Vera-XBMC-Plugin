<?xml version="1.0"?>
<implementation>
  <functions>
  	local ipAddress
	local port
	local serviceid = "urn:upnp-org:serviceId:XBMC1"
	local deviceid = lul_device
		
	local DEBUG_MODE = true
	
	local function log(stuff, level)
		luup.log("XBMC: " .. stuff, (level or 50))
	end
	
	local function debug(stuff)
		if (DEBUG_MODE) then
			log("debug " .. stuff, 1)
		end
	end
  
	function getport (lul_device)
		local getports = luup.variable_get(serviceid,"Port", lul_device)
		return getports
	end
 
	function isup ()
		pingcommand = "ping -c 1 " ..ipAddress
		pingresponse = os.execute(pingcommand)
		if (pingresponse == 0) then
			luup.variable_set(serviceid,"PingStatus","up",lul_device)
			debug("XBMCRemote is UP!")
		else
			luup.variable_set(serviceid,"PingStatus","down",lul_device)
			luup.variable_set(serviceid,"PlayerStatus","--",lul_device)
			luup.variable_set(serviceid,"IdleTime","--",lul_device)
			debug("XBMCRemote is DOWN!")
		end
		luup.call_timer("isup", 1, 180, "", "")
	end

 	function curlcall (meth, para)
		port = getport ()
		--debug("CURLCALL: port: " .. port .. " meth: " ..meth .. " para: " ..para .. " ip: " ..ipAddress)
		
		curlcommand = "curl -i -X POST -d '{\"jsonrpc\": \"4.0\", \"method\": \"" .. meth .. "\", \"params\": {" .. para .. "}, \"id\": 1}' http://" .. ipAddress .. ":" .. port .. "/jsonrpc"
		debug("CURLCALL COMMAND: " .. curlcommand)
		
		curlresponse = os.execute(curlcommand)
		debug("CURLCALL ANSWER: " .. curlresponse)
	end

	function XBMCall (action)

		--LEFT
		if (action == "left") then
		method = "Input.Left"
		params = ""
	
		--RIGHT
		elseif (action == "right") then
		method = "Input.Right"
		params = ""

		--UP
		elseif (action == "up") then
		method = "Input.Up"
		params = ""

		--DOWN
		elseif (action == "down") then
		method = "Input.Down"
		params = ""

		--BACK
		elseif (action == "back") then
		method = "Input.Back"
		params = ""

		--HOME
		elseif (action == "home") then
		method = "Input.Home"
		params = ""

		--ENTER
		elseif (action == "enter") then
		method = "Input.Select"
		params = ""

		--PLAY / PAUSE
		elseif (action == "playpause") then
		method = "Player.PlayPause"
		params = "\"playerid\": 1"

		--STOP
		elseif (action == "stop") then
		method = "Player.Stop"
		params = "\"playerid\": 1"

		--MUTE
		elseif (action == "mute") then
		method = "Application.SetMute"
		params = "\"mute\": \"toggle\""
		
		--REBOOT
		elseif (action == "reboot") then
		method = "System.Reboot"
		params = ""
		
		--SUSPEND
		elseif (action == "suspend") then
		method = "System.Suspend"
		params = ""
		
		--SHUTDOWN
		elseif (action == "shutdown") then
		method = "System.Shutdown"
		params = ""
		
		--AUDIO LIBRARY UPDATE
		elseif (action == "audioupdate") then
		method = "AudioLibrary.Scan"
		params = ""
		
		--AUDIO LIBRARY CLEAN
		elseif (action == "audioclean") then
		method = "AudioLibrary.Clean"
		params = ""
		
		--VIDEO LIBRARY SCAN
		elseif (action == "videoupdate") then
		method = "VideoLibrary.Scan"
		params = ""
		
		--VIDEO LIBRARY CLEAN
		elseif (action == "videoclean") then
		method = "VideoLibrary.Clean"
		params = ""
		
		--NEXT
		elseif (action == "next") then
		method = "Player.GoNext"
		params = "\"playerid\": 1"
		
		--PREVIOUS
		elseif (action == "prev") then
		method = "Player.GoPrevious"
		params = "\"playerid\": 1"
		
		--FASTER
		elseif (action == "faster") then
		method = "Player.SetSpeed"
		params = "\"playerid\": 1, \"speed\":\"increment\""
		
		--SLOWER
		elseif (action == "slower") then
		method = "Player.SetSpeed"
		params = "\"playerid\": 1, \"speed\":\"decrement\""
		
		--VOLUME UP
		elseif (action == "vup") then
		method = "Application.SetVolume"
		params = "\"volume\":100"
		
		--VOLUME DOWN
		elseif (action == "vdown") then
		method = "Application.SetVolume"
		params = "\"volume\":0"

		--ERROR
		else
		debug("XBMCall Command not found! action: " .. action)
		
		end

		debug("action: " .. action .. " method: " ..method .. " params: " ..params)
		
		curlcall (method, params)

	end
	 
	function init(lul_device)
		ipAddress = luup.devices[lul_device].ip

		if (ipAddress == nil or ipAddress == "") then
			return false, "IP Address is required in Device's Advanced Settings!", "XBMCRemote"
		else
			local Port1 = luup.variable_get(serviceid,"Port", lul_device)
			if Port1 == nil then
				luup.variable_set(serviceid,"Port","80",lul_device)
			end
			local PingInterval1 = luup.variable_get(serviceid,"PingInterval", lul_device)
			if PingInterval1 == nil then
				luup.variable_set(serviceid,"PingInterval","180",lul_device)
			end
			local PingStatus1 = luup.variable_get(serviceid,"PingStatus", lul_device)
			if PingStatus1 == nil then
				luup.variable_set(serviceid,"PingStatus","--",lul_device)
			end
			local IdleTime1 = luup.variable_get(serviceid,"IdleTime", lul_device)
			if IdleTime1 == nil then
				luup.variable_set(serviceid,"IdleTime","--",lul_device)
			end
			local PlayerStatus1 = luup.variable_get(serviceid,"PlayerStatus", lul_device)
			if PlayerStatus1 == nil then
				luup.variable_set(serviceid,"PlayerStatus","--",lul_device)
			end
			isup()
			--debug("XBMCRemote successfully initialized!")	
		end
	end
  </functions>
  <startup>init</startup>
  <actionList>
	
    <action>
      <serviceId>urn:upnp-org:serviceId:XBMC1</serviceId>
      <name>GetPlayerStatus</name>
      <run>
        luup.variable_get(serviceid, "PlayerStatus", lul_device)
      </run>
    </action>
    <action>
      <serviceId>urn:upnp-org:serviceId:XBMC1</serviceId>
      <name>SetPlayerStatus</name>
      <run>
        luup.variable_set(serviceid, "PlayerStatus", lul_settings.newPlayerStatus, lul_device)
      </run>
    </action>
	<action>
      <serviceId>urn:upnp-org:serviceId:XBMC1</serviceId>
      <name>XBMCall</name>
      <run>
        XBMCall(lul_settings.action)
      </run>
    </action>
	
   </actionList>
</implementation>
 
 
